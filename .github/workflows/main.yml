name: Send Emails on New Links

on:
  push:
    branches:
      - main
  schedule:
    - cron: "*/15 * * * *"  # Executar a cada 15 minutos

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Restore Cache
      id: cache-restore
      uses: actions/cache@v3
      with:
        path: seen_links_ntc.txt
        key: ${{ runner.os }}-seen-links-cache-ntc-${{ hashFiles('seen_links_ntc.txt') }}
        restore-keys: |
          ${{ runner.os }}-seen-links-cache-ntc-

    - name: Run the Python Script
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        TO_EMAIL: ${{ secrets.TO_EMAIL }}
      run: python3 ntc_avr.py

    - name: Save Cache If File Changed
      run: |
        if [ -f seen_links_ntc.txt ]; then
          new_key=$(sha256sum seen_links_ntc.txt | awk '{print $1}')
          echo "New cache key: $new_key"
          if [ "$new_key" != "${{ steps.cache-restore.outputs.cache-hit }}" ]; then
            echo "Cache changed, saving new cache..."
            echo "::set-output name=cache-updated::true"
          else
            echo "Cache not changed, skipping save."
            echo "::set-output name=cache-updated::false"
          fi
        else
          echo "File seen_links_ntc.txt not found!"
          echo "::set-output name=cache-updated::false"
        fi
      id: cache-check

    - name: Save Updated Cache
      if: steps.cache-check.outputs.cache-updated == 'true'
      uses: actions/cache@v3
      with:
        path: seen_links_ntc.txt
        key: ${{ runner.os }}-seen-links-cache-ntc-${{ hashFiles('seen_links_ntc.txt') }}
        restore-keys: |
          ${{ runner.os }}-seen-links-cache-ntc-
